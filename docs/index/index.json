{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/linkedlist\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/linkedlist\/first","title":"var first: Node<T>?","type":"property"},{"path":"\/documentation\/foundationextension\/linkedlist\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/foundationextension\/linkedlist\/last","title":"var last: Node<T>?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/linkedlist\/append(_:)","title":"func append(T)","type":"method"},{"path":"\/documentation\/foundationextension\/linkedlist\/nodeat(_:)","title":"func nodeAt(Int) -> Node<T>?","type":"method"},{"path":"\/documentation\/foundationextension\/linkedlist\/remove(_:)","title":"func remove(Node<T>) -> T","type":"method"},{"path":"\/documentation\/foundationextension\/linkedlist\/removeall()","title":"func removeAll()","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/linkedlist\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/foundationextension\/linkedlist\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/linkedlist","title":"LinkedList","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/node\/next","title":"var next: Node<T>?","type":"property"},{"path":"\/documentation\/foundationextension\/node\/previous","title":"var previous: Node<T>?","type":"property"},{"path":"\/documentation\/foundationextension\/node\/value","title":"var value: T","type":"property"}],"path":"\/documentation\/foundationextension\/node","title":"Node","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/binaryrepresentable\/binaryrepresentabletype","title":"BinaryRepresentableType","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/foundationextension\/binaryrepresentable\/data-203qv","title":"var data: Data","type":"property"}],"title":"BinaryRepresentable Implementations","type":"groupMarker"}],"path":"\/documentation\/foundationextension\/binaryrepresentable\/data-5oxq1","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/binaryrepresentable","title":"BinaryRepresentable","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/binaryrepresentablecollection\/init(_:)","title":"init(UnsafeBufferPointer<Element>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/foundationextension\/binaryrepresentablecollection\/data-14ier","title":"var data: Data","type":"property"}],"title":"BinaryRepresentableCollection Implementations","type":"groupMarker"}],"path":"\/documentation\/foundationextension\/binaryrepresentablecollection\/data-5f8iz","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/binaryrepresentablecollection","title":"BinaryRepresentableCollection","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/stackprotocol\/element","title":"Element","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/stackprotocol\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/stackprotocol\/peek()","title":"func peek() -> Self.Element?","type":"method"},{"path":"\/documentation\/foundationextension\/stackprotocol\/pop()","title":"func pop() -> Self.Element?","type":"method"},{"path":"\/documentation\/foundationextension\/stackprotocol\/push(_:)","title":"func push(Self.Element)","type":"method"}],"path":"\/documentation\/foundationextension\/stackprotocol","title":"StackProtocol","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/fastqueue\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/fastqueue\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/foundationextension\/fastqueue\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/fastqueue\/dequeue()","title":"func dequeue() -> T?","type":"method"},{"path":"\/documentation\/foundationextension\/fastqueue\/enqueue(_:)","title":"func enqueue(T)","type":"method"},{"path":"\/documentation\/foundationextension\/fastqueue\/peek()","title":"func peek() -> T?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/fastqueue\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/foundationextension\/fastqueue\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/fastqueue","title":"FastQueue","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/hashedheap\/init(array:sort:)","title":"init(array: [T], sort: (T, T) -> Bool)","type":"init"},{"path":"\/documentation\/foundationextension\/hashedheap\/init(sort:)","title":"init(sort: (T, T) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/hashedheap\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/foundationextension\/hashedheap\/elements","title":"var elements: [T]","type":"property"},{"path":"\/documentation\/foundationextension\/hashedheap\/indices","title":"var indices: [T : Int]","type":"property"},{"path":"\/documentation\/foundationextension\/hashedheap\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/hashedheap\/index(of:)","title":"func index(of: T) -> Int?","type":"method"},{"path":"\/documentation\/foundationextension\/hashedheap\/insert(_:)-4y2b3","title":"func insert<S>(S)","type":"method"},{"path":"\/documentation\/foundationextension\/hashedheap\/insert(_:)-9kevy","title":"func insert(T)","type":"method"},{"path":"\/documentation\/foundationextension\/hashedheap\/peek()","title":"func peek() -> T?","type":"method"},{"path":"\/documentation\/foundationextension\/hashedheap\/remove()","title":"func remove() -> T?","type":"method"},{"path":"\/documentation\/foundationextension\/hashedheap\/remove(at:)","title":"func remove(at: Int) -> T?","type":"method"},{"path":"\/documentation\/foundationextension\/hashedheap\/removeall()","title":"func removeAll()","type":"method"},{"path":"\/documentation\/foundationextension\/hashedheap\/removelast()","title":"func removeLast() -> T","type":"method"},{"path":"\/documentation\/foundationextension\/hashedheap\/replace(_:at:)","title":"func replace(T, at: Int)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/hashedheap\/subscript(_:)","title":"subscript(Int) -> T","type":"subscript"}],"path":"\/documentation\/foundationextension\/hashedheap","title":"HashedHeap","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/heap\/init(array:sort:)","title":"init(array: [T], sort: (T, T) -> Bool)","type":"init"},{"path":"\/documentation\/foundationextension\/heap\/init(sort:)","title":"init(sort: (T, T) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/heap\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/foundationextension\/heap\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/heap\/index(of:)","title":"func index(of: T) -> Int?","type":"method"},{"path":"\/documentation\/foundationextension\/heap\/insert(_:)-6bd4r","title":"func insert(T)","type":"method"},{"path":"\/documentation\/foundationextension\/heap\/insert(_:)-8dvqb","title":"func insert<S>(S)","type":"method"},{"path":"\/documentation\/foundationextension\/heap\/peek()","title":"func peek() -> T?","type":"method"},{"path":"\/documentation\/foundationextension\/heap\/remove()","title":"func remove() -> T?","type":"method"},{"path":"\/documentation\/foundationextension\/heap\/remove(at:)","title":"func remove(at: Int) -> T?","type":"method"},{"path":"\/documentation\/foundationextension\/heap\/remove(node:)","title":"func remove(node: T) -> T?","type":"method"},{"path":"\/documentation\/foundationextension\/heap\/replace(index:value:)","title":"func replace(index: Int, value: T)","type":"method"}],"path":"\/documentation\/foundationextension\/heap","title":"Heap","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/priorityqueue\/init(sort:)","title":"init(sort: (T, T) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/priorityqueue\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/foundationextension\/priorityqueue\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/priorityqueue\/changepriority(index:value:)","title":"func changePriority(index: Int, value: T)","type":"method"},{"path":"\/documentation\/foundationextension\/priorityqueue\/dequeue()","title":"func dequeue() -> T?","type":"method"},{"path":"\/documentation\/foundationextension\/priorityqueue\/enqueue(_:)","title":"func enqueue(T)","type":"method"},{"path":"\/documentation\/foundationextension\/priorityqueue\/peek()","title":"func peek() -> T?","type":"method"}],"path":"\/documentation\/foundationextension\/priorityqueue","title":"PriorityQueue","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/queue\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/queue\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/queue\/dequeue()","title":"func dequeue() -> T?","type":"method"},{"path":"\/documentation\/foundationextension\/queue\/enqueue(_:)","title":"func enqueue(T)","type":"method"},{"path":"\/documentation\/foundationextension\/queue\/peek()","title":"func peek() -> T?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/queue\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/foundationextension\/queue\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/queue","title":"Queue","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/stack\/peek()","title":"func peek() -> Element?","type":"method"},{"path":"\/documentation\/foundationextension\/stack\/pop()","title":"func pop() -> Element?","type":"method"},{"path":"\/documentation\/foundationextension\/stack\/push(_:)","title":"func push(Element)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/stack\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/foundationextension\/stack\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/stack\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/foundationextension\/stack\/==(_:_:)","title":"static func == (Stack<Element>, Stack<Element>) -> Bool","type":"op"}],"path":"\/documentation\/foundationextension\/stack\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/stack\/init(arrayliteral:)","title":"init(arrayLiteral: Stack<Element>.Element...)","type":"init"}],"path":"\/documentation\/foundationextension\/stack\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/stack\/isempty","title":"var isEmpty: Bool","type":"property"}],"path":"\/documentation\/foundationextension\/stack\/stackprotocol-implementations","title":"StackProtocol Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/stack","title":"Stack","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/clamp(_:min:max:)","title":"func clamp<T>(T, min: T, max: T) -> T","type":"func"},{"path":"\/documentation\/foundationextension\/clamp(_:to:)","title":"func clamp<T>(T, to: ClosedRange<T>) -> T","type":"func"},{"path":"\/documentation\/foundationextension\/debug_action(_:)","title":"func debug_action(() -> Void)","type":"func"},{"path":"\/documentation\/foundationextension\/debug_print(_:separator:terminator:)-7sapv","title":"func debug_print(Any..., separator: String, terminator: String) async","type":"func"},{"path":"\/documentation\/foundationextension\/debug_print(_:separator:terminator:)-98pl6","title":"func debug_print(Any..., separator: String, terminator: String)","type":"func"},{"path":"\/documentation\/foundationextension\/debug_print_async(_:separator:terminator:)","title":"func debug_print_async(Any..., separator: String, terminator: String)","type":"func"},{"path":"\/documentation\/foundationextension\/greatestcommondivisor(_:)","title":"func greatestCommonDivisor<T>([T]) -> T","type":"func"},{"path":"\/documentation\/foundationextension\/greatestcommondivisor(_:_:)","title":"func greatestCommonDivisor<T>(T, T) -> T","type":"func"},{"path":"\/documentation\/foundationextension\/ilerp(_:min:max:)","title":"func ilerp<T>(T, min: T, max: T) -> T","type":"func"},{"path":"\/documentation\/foundationextension\/leastcommonmultiple(_:_:)","title":"func leastCommonMultiple<T>(T, T) -> T","type":"func"},{"path":"\/documentation\/foundationextension\/lerp(_:min:max:)","title":"func lerp<T>(T, min: T, max: T) -> T","type":"func"},{"path":"\/documentation\/foundationextension\/load_collection(_:_:)-6x6at","title":"func load_collection<K, V, R>(inout [K : V], String)","type":"func"},{"path":"\/documentation\/foundationextension\/load_collection(_:_:)-lufb","title":"func load_collection<T>(inout T, String)","type":"func"},{"path":"\/documentation\/foundationextension\/lowestterms(numerator:denominator:)","title":"func lowestTerms<T>(numerator: T, denominator: T) -> (T, T)","type":"func"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/languagecodekey","title":"LanguageCodeKey","type":"typealias"},{"path":"\/documentation\/foundationextension\/localizationdictionary","title":"LocalizationDictionary","type":"typealias"},{"path":"\/documentation\/foundationextension\/localizedstringvalue","title":"LocalizedStringValue","type":"typealias"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/foundation\/jsondecoder\/decode(_:from:)","title":"func decode<K, V, R>([K : V].Type, from: Data) throws -> [K : V]","type":"method"}],"path":"\/documentation\/foundationextension\/foundation\/jsondecoder","title":"JSONDecoder","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/foundation\/userdefaults\/bool(forkey:)","title":"func bool(forKey: some RawRepresentable<String>) -> Bool","type":"method"},{"path":"\/documentation\/foundationextension\/foundation\/userdefaults\/object(forkey:)","title":"func object(forKey: some RawRepresentable<String>) -> Any?","type":"method"},{"path":"\/documentation\/foundationextension\/foundation\/userdefaults\/set(_:forkey:)","title":"func set(Any?, forKey: some RawRepresentable<String>)","type":"method"},{"path":"\/documentation\/foundationextension\/foundation\/userdefaults\/string(forkey:)","title":"func string(forKey: some RawRepresentable<String>) -> String?","type":"method"}],"path":"\/documentation\/foundationextension\/foundation\/userdefaults","title":"UserDefaults","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/foundation\/calendar\/daycomponentdifference(_:and:)","title":"func dayComponentDifference(Date, and: Date) -> Int","type":"method"}],"path":"\/documentation\/foundationextension\/foundation\/calendar","title":"Calendar","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/foundation\/data\/load()-79sej","title":"func load<T>() -> T","type":"method"},{"path":"\/documentation\/foundationextension\/foundation\/data\/load()-9j6a1","title":"func load<T>() -> T","type":"method"},{"path":"\/documentation\/foundationextension\/foundation\/data\/load(as:)-5e1bj","title":"func load<T>(as: T.Type) -> T","type":"method"},{"path":"\/documentation\/foundationextension\/foundation\/data\/load(as:)-6qfqv","title":"func load<T>(as: T.Type) -> T","type":"method"}],"path":"\/documentation\/foundationextension\/foundation\/data","title":"Data","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/foundation\/date\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/foundationextension\/foundation\/date\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/foundation\/date\/rawvalue","title":"var rawValue: String","type":"property"}],"path":"\/documentation\/foundationextension\/foundation\/date\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/foundation\/date","title":"Date","type":"extension"}],"path":"\/documentation\/foundationextension\/foundation","title":"Foundation","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/realmodule\/real\/ilerped(min:max:)","title":"func ilerped(min: Self, max: Self) -> Self","type":"method"},{"path":"\/documentation\/foundationextension\/realmodule\/real\/lerped(min:max:)","title":"func lerped(min: Self, max: Self) -> Self","type":"method"}],"path":"\/documentation\/foundationextension\/realmodule\/real","title":"Real","type":"extension"}],"path":"\/documentation\/foundationextension\/realmodule","title":"RealModule","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/bidirectionalcollection\/subscript(_:default:)","title":"subscript(Self.Index, default _: Self.Element) -> Self.Element","type":"subscript"},{"path":"\/documentation\/foundationextension\/swift\/bidirectionalcollection\/subscript(safe:)","title":"subscript(safe _: Self.Index) -> Self.Element?","type":"subscript"}],"path":"\/documentation\/foundationextension\/swift\/bidirectionalcollection","title":"BidirectionalCollection","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/binaryinteger\/iseven","title":"var isEven: Bool","type":"property"},{"path":"\/documentation\/foundationextension\/swift\/binaryinteger\/isodd","title":"var isOdd: Bool","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/binaryinteger","title":"BinaryInteger","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/comparable\/clamped(min:max:)","title":"func clamped(min: Self, max: Self) -> Self","type":"method"},{"path":"\/documentation\/foundationextension\/swift\/comparable\/clamped(to:)","title":"func clamped(to: ClosedRange<Self>) -> Self","type":"method"}],"path":"\/documentation\/foundationextension\/swift\/comparable","title":"Comparable","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/sequence\/count(where:)","title":"func count(where: (Self.Element) throws -> Bool) rethrows -> Int","type":"method"}],"path":"\/documentation\/foundationextension\/swift\/sequence","title":"Sequence","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/singlevaluedecodingcontainer\/decode(_:)","title":"func decode<K, V, R>([K : V].Type) throws -> [K : V]","type":"method"}],"path":"\/documentation\/foundationextension\/swift\/singlevaluedecodingcontainer","title":"SingleValueDecodingContainer","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/array\/chunked(into:)","title":"func chunked(into: Int) -> [[Element]]","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/array\/subscript(safe:)-38ndo","title":"subscript(safe _: CountableClosedRange<Array<Element>.Index>) -> ArraySlice<Element>","type":"subscript"},{"path":"\/documentation\/foundationextension\/swift\/array\/subscript(safe:)-4sqrz","title":"subscript(safe _: CountableRange<Array<Element>.Index>) -> ArraySlice<Element>","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/array\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/array\/binaryrepresentablecollection-implementations","title":"BinaryRepresentableCollection Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/array\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/foundationextension\/swift\/array\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/array\/hashvalue","title":"var hashValue: Int","type":"property"},{"path":"\/documentation\/foundationextension\/swift\/array\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/array\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/foundationextension\/swift\/array\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/foundationextension\/swift\/array\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/array","title":"Array","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/bool\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/bool\/binaryrepresentable-implementations","title":"BinaryRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/bool","title":"Bool","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/dictionary\/minus(dict:)","title":"func minus(dict: [Key : Value]) -> [Key : Value]","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/dictionary\/subscript(_:)","title":"subscript(Locale) -> LocalizedStringValue","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/dictionary\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/foundationextension\/swift\/dictionary\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/dictionary\/hashvalue","title":"var hashValue: Int","type":"property"},{"path":"\/documentation\/foundationextension\/swift\/dictionary\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/dictionary\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/foundationextension\/swift\/dictionary\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/foundationextension\/swift\/dictionary\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/dictionary","title":"Dictionary","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/double\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/double\/binaryrepresentable-implementations","title":"BinaryRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/double","title":"Double","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/float\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/float\/binaryrepresentable-implementations","title":"BinaryRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/float","title":"Float","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/int\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/int\/binaryrepresentable-implementations","title":"BinaryRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/int","title":"Int","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/int16\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/int16\/binaryrepresentable-implementations","title":"BinaryRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/int16","title":"Int16","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/int32\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/int32\/binaryrepresentable-implementations","title":"BinaryRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/int32","title":"Int32","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/int64\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/int64\/binaryrepresentable-implementations","title":"BinaryRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/int64","title":"Int64","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/int8\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/int8\/binaryrepresentable-implementations","title":"BinaryRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/int8","title":"Int8","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/keyeddecodingcontainer\/decode(_:forkey:)","title":"func decode<K0, V, R>([K0 : V].Type, forKey: Key) throws -> [K0 : V]","type":"method"}],"path":"\/documentation\/foundationextension\/swift\/keyeddecodingcontainer","title":"KeyedDecodingContainer","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/set\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/set\/binaryrepresentablecollection-implementations","title":"BinaryRepresentableCollection Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/set\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/foundationextension\/swift\/set\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/set\/rawvalue","title":"var rawValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/set\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/foundationextension\/swift\/set\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/set","title":"Set","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/string\/condensewhitespace()","title":"func condenseWhitespace() -> String","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/string\/subscript(_:)-2dttx","title":"subscript(PartialRangeThrough<Int>) -> Substring","type":"subscript"},{"path":"\/documentation\/foundationextension\/swift\/string\/subscript(_:)-2n2mc","title":"subscript(CountableClosedRange<Int>) -> Substring","type":"subscript"},{"path":"\/documentation\/foundationextension\/swift\/string\/subscript(_:)-3tlwj","title":"subscript(PartialRangeUpTo<Int>) -> Substring","type":"subscript"},{"path":"\/documentation\/foundationextension\/swift\/string\/subscript(_:)-5ce9b","title":"subscript(Int) -> Character","type":"subscript"},{"path":"\/documentation\/foundationextension\/swift\/string\/subscript(_:)-5f11a","title":"subscript(CountableRange<Int>) -> Substring","type":"subscript"},{"path":"\/documentation\/foundationextension\/swift\/string\/subscript(_:)-9isgr","title":"subscript(CountablePartialRangeFrom<Int>) -> Substring","type":"subscript"}],"path":"\/documentation\/foundationextension\/swift\/string","title":"String","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/uint\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/uint\/binaryrepresentable-implementations","title":"BinaryRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/uint","title":"UInt","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/uint16\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/uint16\/binaryrepresentable-implementations","title":"BinaryRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/uint16","title":"UInt16","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/uint32\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/uint32\/binaryrepresentable-implementations","title":"BinaryRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/uint32","title":"UInt32","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/uint64\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/uint64\/binaryrepresentable-implementations","title":"BinaryRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/uint64","title":"UInt64","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/swift\/uint8\/data","title":"var data: Data","type":"property"}],"path":"\/documentation\/foundationextension\/swift\/uint8\/binaryrepresentable-implementations","title":"BinaryRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextension\/swift\/uint8","title":"UInt8","type":"extension"}],"path":"\/documentation\/foundationextension\/swift","title":"Swift","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextension\/_concurrency\/task\/delay(by:)","title":"static func delay(by: TimeInterval) async throws","type":"method"},{"path":"\/documentation\/foundationextension\/_concurrency\/task\/sleep(seconds:)","title":"static func sleep(seconds: TimeInterval) async throws","type":"method"}],"path":"\/documentation\/foundationextension\/_concurrency\/task","title":"Task","type":"extension"}],"path":"\/documentation\/foundationextension\/_concurrency","title":"_Concurrency","type":"extension"}],"path":"\/documentation\/foundationextension","title":"FoundationExtension","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}